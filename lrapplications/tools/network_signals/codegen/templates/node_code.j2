/***********************************************************
 * Generated CAN Code File for Node
 ***********************************************************
 * Node: {{ nodeName }}
 * Network Version: {{ networkVersion }}
 *
 ***********************************************************
 * 
 **********************************************************/

#include "{{nodeName}}_CAN.h" 
#include "mcp2515/can.h"
 
 /*
  * Define functions for CAN Tx Message creation
  *
  */
{% for txMsg in txMessages %}
	int8_t createMsg_{{txMsg.Message.ID}}(struct can_frame* pCANFrame, Msg_{{txMsg.Message.ID}}* pMsg)
	{		
		pCANFrame->can_id = CAN_ID_{{txMsg.Message.ID}};
		{% set msgCANID = txMsg.Message.GeneratorData['CAN_ID'] | int %}
		{% if msgCANID > 2047 %}
		pCANFrame->can_id = pCANFrame->can_id | CAN_EFF_FLAG;
		{% endif %}
		pCANFrame->can_dlc = {{txMsg.Message.GeneratorData["DLC"]}};
		{% set signalBits = namespace(bitCount = 0) %}		
		{%- for sig in txMsg.Message.Signals %}	
			{%- if sig.Signal.Size == 1 %}					
				{%- set signalSize = 8 %}
			{%- else %}				
				{%- set signalSize = sig.Signal.Size %}		
			{%- endif %}
			{%- set signalBits.bitCount = signalBits.bitCount + signalSize %}							
			{% if sig.Signal.Type == 2 %}
		// Signal	: {{sig.Signal.ID}}
		// Start-Bit: {{signalBits.bitCount - signalSize}} End-Bit: {{signalBits.bitCount - 1}}
				{%- set startByte = (signalBits.bitCount - signalSize) // 8 %}
				{% if sig.Signal.Size == 1 or sig.Signal.Size == 8 %}					
		pCANFrame->data[{{startByte}}] = (int8_t)(pMsg->{{sig.Signal.ID}} & 0xFF);
				{% elif sig.Signal.Size == 16 %}					
		pCANFrame->data[{{startByte}}] = (int8_t)((pMsg->{{sig.Signal.ID}} & 0xFF00) >> 8);
		pCANFrame->data[{{startByte + 1}}] = (int8_t)(pMsg->{{sig.Signal.ID}} & 0x00FF);
				{% elif sig.Signal.Size == 32 %}					
		pCANFrame->data[{{startByte}}] = (int8_t)((pMsg->{{sig.Signal.ID}} & 0xFF000000) >> 24);
		pCANFrame->data[{{startByte + 1}}] = (int8_t)((pMsg->{{sig.Signal.ID}} & 0x00FF0000) >> 16);
		pCANFrame->data[{{startByte + 2}}] = (int8_t)((pMsg->{{sig.Signal.ID}} & 0x0000FF00) >> 8);
		pCANFrame->data[{{startByte + 3}}] = (int8_t)((pMsg->{{sig.Signal.ID}} & 0x000000FF));
				{%- endif %}
			{%- endif %}
		{%- endfor %}
				
		return 0;
	}
	
{% endfor %}

 /*
  * Define functions for CAN Rx Message parsing
  *
  */
{% for rxMsg in rxMessages %}
	int8_t parseMsg_{{rxMsg.Message.ID}}(struct can_frame* pCANFrame, Msg_{{rxMsg.Message.ID}}* pMsg)
	{
		{% set msgCANID = rxMsg.Message.GeneratorData['CAN_ID'] | int %}
		{%- if msgCANID > 2047 %}
		// Check Extended ID without extended flag (remove it for the comparison)
		if ((pCANFrame->can_id & ~CAN_EFF_FLAG) != CAN_ID_{{rxMsg.Message.ID}})
		{%- else %}
		// Check the Standard ID
		if (pCANFrame->can_id != CAN_ID_{{rxMsg.Message.ID}})
		{%- endif %}		
			return -1;
	
		// Check DLC
		if (pCANFrame->can_dlc != {{rxMsg.Message.GeneratorData["DLC"]}})
			return -1;
					
		// Extract the data from CAN-Frame
		{%- set signalBits = namespace(bitCount = 0) %}		
		{%- for sig in rxMsg.Message.Signals %}
			{%- if sig.Signal.Size == 1 %}					
				{%- set signalSize = 8 %}
			{%- else %}				
				{%- set signalSize = sig.Signal.Size %}		
			{%- endif %}
			{%- set signalBits.bitCount = signalBits.bitCount + signalSize %}			
			{% if sig.Signal.Type == 2 %}
		// Signal	: {{sig.Signal.ID}}
		// Start-Bit: {{signalBits.bitCount - signalSize}} End-Bit: {{signalBits.bitCount - 1}}
				{% set startByte = (signalBits.bitCount - signalSize) // 8 %}
				{% if sig.Signal.Size == 1 or sig.Signal.Size == 8 %}
		pMsg->{{sig.Signal.ID}} = pCANFrame->data[{{startByte}}]; 					
				{% elif sig.Signal.Size == 16 %}					
		pMsg->{{sig.Signal.ID}} = (pCANFrame->data[{{startByte}}] << 8) | 
								  (pCANFrame->data[{{startByte + 1}}]);										  				
				{% elif sig.Signal.Size == 32 %}					
		pMsg->{{sig.Signal.ID}} = (pCANFrame->data[{{startByte}}] << 24) | 
								  (pCANFrame->data[{{startByte + 1}}] << 16) |
								  (pCANFrame->data[{{startByte + 2}}] << 8) |
								  (pCANFrame->data[{{startByte + 3}}]);		
				{%- endif %}
			{%- endif %}
		{%- endfor %}
					
		return 0;
	}
	
{%- endfor %}
 