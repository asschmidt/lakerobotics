/***********************************************************
 * Generated CAN Code File for Node
 ***********************************************************
 * Node: {{ nodeName }}
 * Network Version: {{ networkVersion }}
 *
 ***********************************************************
 *
 **********************************************************/

#include <stdint.h>

#include <stm32f1xx_hal_can.h>

#include "{{nodeName}}_CAN_{{interfaceController}}.h"

 /*
  * Define functions for CAN Tx Message creation
  *
  */
{% for txMsg in txMessages %}
int8_t createMsg_{{txMsg.Message.GeneratorData['CODE_NAME']}}(CAN_FRAME* pCANFrame, Msg_{{txMsg.Message.GeneratorData['CODE_NAME']}}* pMsg)
{
	{% set msgCANID = txMsg.Message.GeneratorData['CAN_ID'] | int %}
	{% if msgCANID <= 2047 %}
	pCANFrame->txHeader.StdId = CAN_ID_{{txMsg.Message.GeneratorData['CODE_NAME']}};
	pCANFrame->txHeader.ExtId = 0;
	pCANFrame->txHeader.IDE   = CAN_ID_STD;
	{% else %}
	pCANFrame->txHeader.ExtId = CAN_ID_{{txMsg.Message.GeneratorData['CODE_NAME']}};
	pCANFrame->txHeader.StdId = 0;
	pCANFrame->txHeader.IDE   = CAN_ID_EXT;
	{% endif %}

	pCANFrame->txHeader.RTR = CAN_RTR_DATA;
	pCANFrame->txHeader.DLC = {{txMsg.Message.GeneratorData["DLC"]}};
	pCANFrame->txHeader.TransmitGlobalTime = DISABLE;

	{% set signalBits = namespace(bitCount = 0) %}
	{%- for sig in txMsg.Message.Signals %}
		{%- if sig.Signal.Size == 1 %}
			{%- set signalSize = 8 %}
		{%- else %}
			{%- set signalSize = sig.Signal.Size %}
		{%- endif %}
		{%- set signalBits.bitCount = signalBits.bitCount + signalSize %}
		{% if sig.Signal.Type == 2 %}
	// Signal	: {{sig.Signal.GeneratorData['CODE_NAME']}}
	// Start-Bit: {{signalBits.bitCount - signalSize}} End-Bit: {{signalBits.bitCount - 1}}
			{% set startByte = (signalBits.bitCount - signalSize) // 8 %}
			{% if signalSize == 1 or signalSize == 8 %}
	pCANFrame->data[{{startByte}}] = (uint8_t)(pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} & 0xFF);
			{% elif signalSize == 16 %}
	pCANFrame->data[{{startByte}}] = (uint8_t)((pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} & 0xFF00) >> 8);
	pCANFrame->data[{{startByte + 1}}] = (uint8_t)(pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} & 0x00FF);
			{% elif signalSize == 32 %}
	pCANFrame->data[{{startByte}}] = (uint8_t)((pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} & 0xFF000000) >> 24);
	pCANFrame->data[{{startByte + 1}}] = (uint8_t)((pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} & 0x00FF0000) >> 16);
	pCANFrame->data[{{startByte + 2}}] = (uint8_t)((pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} & 0x0000FF00) >> 8);
	pCANFrame->data[{{startByte + 3}}] = (uint8_t)((pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} & 0x000000FF));
			{%- endif %}
		{%- endif %}
	{%- endfor %}

	return 0;
}

{% endfor %}

 /*
  * Define functions for CAN Rx Message parsing
  *
  */
{% for rxMsg in rxMessages %}
int8_t parseMsg_{{rxMsg.Message.GeneratorData['CODE_NAME']}}(CAN_FRAME* pCANFrame, Msg_{{rxMsg.Message.GeneratorData['CODE_NAME']}}* pMsg)
{
	uint32_t canID = 0;

	{% set msgCANID = rxMsg.Message.GeneratorData['CAN_ID'] | int %}
	{%- if msgCANID > 2047 %}
	// Check the Extended ID
	canID = pCANFrame->rxHeader.ExtID;
	{%- else %}
	// Check the Standard ID
	canID = pCANFrame->rxHeader.StdId;
	{%- endif %}

	if (canID != CAN_ID_{{rxMsg.Message.GeneratorData['CODE_NAME']}})
		return -1;

	// Check DLC
	if (pCANFrame->rxHeader.DLC != {{rxMsg.Message.GeneratorData["DLC"]}})
		return -1;

	// Extract the data from CAN-Frame
	{% set signalBits = namespace(bitCount = 0) %}
	{%- for sig in rxMsg.Message.Signals %}
		{%- if sig.Signal.Size == 1 %}
			{%- set signalSize = 8 %}
		{%- else %}
			{%- set signalSize = sig.Signal.Size %}
		{%- endif %}
		{% set signalBits.bitCount = signalBits.bitCount + signalSize %}
		{% if sig.Signal.Type == 2 %}
	// Signal	: {{sig.Signal.GeneratorData['CODE_NAME']}}
	// Start-Bit: {{signalBits.bitCount - signalSize}} End-Bit: {{signalBits.bitCount - 1}}
			{% set startByte = (signalBits.bitCount - signalSize) // 8 %}
			{% if sig.Signal.Size == 1 or sig.Signal.Size == 8 %}
	pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} = pCANFrame->data[{{startByte}}];
			{% elif sig.Signal.Size == 16 %}
	pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} = (pCANFrame->data[{{startByte}}] << 8) |
							  (pCANFrame->data[{{startByte + 1}}]);
			{% elif sig.Signal.Size == 32 %}
	pMsg->{{sig.Signal.GeneratorData['CODE_NAME']}} = (pCANFrame->data[{{startByte}}] << 24) |
							  (pCANFrame->data[{{startByte + 1}}] << 16) |
							  (pCANFrame->data[{{startByte + 2}}] << 8) |
							  (pCANFrame->data[{{startByte + 3}}]);
			{%- endif %}
		{%- endif %}
	{%- endfor %}

	return 0;
}

int8_t isMsg_{{rxMsg.Message.GeneratorData['CODE_NAME']}}(CAN_FRAME* pCANFrame)
{
	uint32_t canID = 0;

	{% set msgCANID = rxMsg.Message.GeneratorData['CAN_ID'] | int %}
	{%- if msgCANID > 2047 %}
	// Check the Extended ID
	canID = pCANFrame->rxHeader.ExtID;
	{%- else %}
	// Check the Standard ID
	canID = pCANFrame->rxHeader.StdId;
	{%- endif %}

	if (canID == CAN_ID_{{rxMsg.Message.GeneratorData['CODE_NAME']}})
		return 1;
	else
		return 0;
}

{%- endfor %}
