/***********************************************************
 * Generated CAN Header File for Node
 ***********************************************************
 * Node: {{ nodeName }}
 * Interface: {{ interfaceName }}
 * Network Version: {{ networkVersion }}
 *
 ***********************************************************
 *
 **********************************************************/

#ifndef {{ interfaceHeaderName }}
#define {{ interfaceHeaderName }}

#include "mcp2515/can.h"

/*
 * Define the network ID of the node
 */
#define NODE_INTERFACE_NETWORK_ID	{{nodeNetworkID}}

/*
 * Define CAN-IDs for special protocol purposes
 *
 */
#define CAN_ID_PARAMETER_REQUEST	NODE_INTERFACE_NETWORK_ID + 1
#define CAN_ID_PARAMETER_RESPONSE	NODE_INTERFACE_NETWORK_ID + 2

/*
 * Defines for TX CAN Messages
 *
*/
{% for txMsg in txMessages %}
#define CAN_ID_{{txMsg.Message.GeneratorData['CODE_NAME']}}			{{txMsg.Message.GeneratorData['CAN_ID_HEX']}}
#define CYCLE_{{txMsg.Message.GeneratorData['CODE_NAME']}}			{{txMsg.Message.Cycle}}

{% endfor %}


/*
 * Declare data type structures for CAN TX Messages
 *
*/
{% for txMsg in txMessages %}
typedef struct _Msg_{{txMsg.Message.GeneratorData['CODE_NAME']}}
{
	{% for sig in txMsg.Message.Signals %}
	// Signal-ID: {{sig.Signal.GeneratorData['CODE_NAME']}} Signal-Type: {{sig.Signal.Type}} Signal-Size: {{sig.Signal.Size}}
		{% if sig.Signal.Type == 2 %}
			{% if sig.Signal.Size == 1 or sig.Signal.Size == 8 %}
	int8_t {{sig.Signal.GeneratorData['CODE_NAME']}};
			{% elif sig.Signal.Size == 16 %}
	int16_t {{sig.Signal.GeneratorData['CODE_NAME']}};
			{% elif sig.Signal.Size == 32 %}
	int32_t {{sig.Signal.GeneratorData['CODE_NAME']}};
			{% endif %}
		{% endif %}
	{% endfor %}
} Msg_{{txMsg.Message.GeneratorData['CODE_NAME']}};

{% endfor %}

/*
 * Declare function prototypes for CAN Tx Message creation
 *
*/
{% for txMsg in txMessages %}
extern int8_t createMsg_{{txMsg.Message.GeneratorData['CODE_NAME']}}(struct can_frame* pCANFrame, Msg_{{txMsg.Message.GeneratorData['CODE_NAME']}}* pMsg);
{% endfor %}

/*
 * Defines for RX CAN Messages
 *
*/
{% for rxMsg in rxMessages %}
#define CAN_ID_{{rxMsg.Message.GeneratorData['CODE_NAME']}}			{{rxMsg.Message.GeneratorData['CAN_ID_HEX']}}
{% endfor %}

/*
 * Declare data type structures for CAN RX Messages
 *
 */
{% for rxMsg in rxMessages %}
typedef struct _Msg_{{rxMsg.Message.GeneratorData['CODE_NAME']}}
{
	{% for sig in rxMsg.Message.Signals %}
	// Signal-ID: {{sig.Signal.GeneratorData['CODE_NAME']}} Signal-Type: {{sig.Signal.Type}} Signal-Size: {{sig.Signal.Size}}
		{% if sig.Signal.Type == 2 %}
			{% if sig.Signal.Size == 1 %}
	int8_t {{sig.Signal.GeneratorData['CODE_NAME']}};
			{% elif sig.Signal.Size == 8 %}
	int8_t {{sig.Signal.GeneratorData['CODE_NAME']}};
			{% elif sig.Signal.Size == 16 %}
	int16_t {{sig.Signal.GeneratorData['CODE_NAME']}};
			{% elif sig.Signal.Size == 32 %}
	int32_t {{sig.Signal.GeneratorData['CODE_NAME']}};
			{% endif %}
		{% endif %}
	{% endfor %}
} Msg_{{rxMsg.Message.GeneratorData['CODE_NAME']}};

{% endfor %}


/*
 * Declare function prototypes for CAN Rx Message parsing
 *
 */
{% for rxMsg in rxMessages %}
extern int8_t parseMsg_{{rxMsg.Message.GeneratorData['CODE_NAME']}}(struct can_frame* pCANFrame, Msg_{{rxMsg.Message.GeneratorData['CODE_NAME']}}* pMsg);
extern int8_t isMsg_{{rxMsg.Message.GeneratorData['CODE_NAME']}}(struct can_frame* pCANFrame);

{% endfor %}

#endif