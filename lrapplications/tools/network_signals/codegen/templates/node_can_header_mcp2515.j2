/***********************************************************
 * Generated CAN Header File for Node
 ***********************************************************
 * Node: {{ nodeName }}
 * Interface: {{ interfaceName }}
 * Network Version: {{ networkVersion }}
 *
 ***********************************************************
 * 
 **********************************************************/
 
#ifndef {{ interfaceHeaderName }}
#define {{ interfaceHeaderName }}
 
#include "mcp2515/can.h"
 
/*
 * Defines for TX CAN Messages
 *
*/
{% for txMsg in txMessages %}
#define CAN_ID_{{txMsg.Message.ID}}			{{txMsg.Message.GeneratorData['CAN_ID_HEX']}}
{% endfor %}
 
 
/*
 * Declare data type structures for CAN TX Messages
 *
*/
{% for txMsg in txMessages %}
typedef struct _Msg_{{txMsg.Message.ID}}
{
	{% for sig in txMsg.Message.Signals %}
	// Signal-ID: {{sig.Signal.ID}} Signal-Type: {{sig.Signal.Type}} Signal-Size: {{sig.Signal.Size}}
		{% if sig.Signal.Type == 2 %}
			{% if sig.Signal.Size == 1 or sig.Signal.Size == 8 %}
	int8_t {{sig.Signal.ID}};
			{% elif sig.Signal.Size == 16 %}
	int16_t {{sig.Signal.ID}};
			{% elif sig.Signal.Size == 32 %}
	int32_t {{sig.Signal.ID}};
			{% endif %}
		{% endif %}
	{% endfor %}
} Msg_{{txMsg.Message.ID}};
 	
{% endfor %}
 
/*
 * Declare function prototypes for CAN Tx Message creation
 *
*/
{% for txMsg in txMessages %}
extern int8_t createMsg_{{txMsg.Message.ID}}(struct can_frame* pCANFrame, Msg_{{txMsg.Message.ID}}* pMsg);
{% endfor %}

/*
 * Defines for RX CAN Messages
 *
*/
{% for rxMsg in rxMessages %}
#define CAN_ID_{{rxMsg.Message.ID}}			{{rxMsg.Message.GeneratorData['CAN_ID_HEX']}}
{% endfor %}

/*
 * Declare data type structures for CAN RX Messages
 *
 */
{% for rxMsg in rxMessages %}
typedef struct _Msg_{{rxMsg.Message.ID}}
{
	{% for sig in rxMsg.Message.Signals %}
	// Signal-ID: {{sig.Signal.ID}} Signal-Type: {{sig.Signal.Type}} Signal-Size: {{sig.Signal.Size}}
		{% if sig.Signal.Type == 2 %}
			{% if sig.Signal.Size == 1 %}
	int8_t {{sig.Signal.ID}};
			{% elif sig.Signal.Size == 8 %}
	int8_t {{sig.Signal.ID}};
			{% elif sig.Signal.Size == 16 %}
	int16_t {{sig.Signal.ID}};
			{% elif sig.Signal.Size == 32 %}
	int32_t {{sig.Signal.ID}};
			{% endif %}
		{% endif %}
	{% endfor %}
} Msg_{{rxMsg.Message.ID}};
 	
{% endfor %}


/*
 * Declare function prototypes for CAN Rx Message parsing
 *
 */
{% for rxMsg in rxMessages %}
extern int8_t parseMsg_{{rxMsg.Message.ID}}(struct can_frame* pCANFrame, Msg_{{rxMsg.Message.ID}}* pMsg);
{% endfor %}
 
#endif